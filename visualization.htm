<!DOCTYPE html>
<html>
<head>
  <title>Actuality-Time Continuum</title>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js" integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI" crossorigin="anonymous"></script>

  <style>
    body {
      display: block;
      padding: 0px;
      margin: 0px;
      overflow: hidden;
    }

    main {
      display: inline-block;
      width: 100%;
    }

    section {
      display: inline-block;
      width: 45%;
      height: 100%;
      padding: 0px;
      margin: 0px;
      overflow: hidden;
    }

    .button {
      background-color: #4CAF50;
      border: none;
      color: white;
      padding: 15px 32px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
      margin: 4px 2px;
      cursor: pointer;
    }

    #editor {
      float: left;
    }

    .highlight {
      background-color: #00ff7e78;
    }

    #preview {
      width: 52%;
      text-align: center;
    }

    #input {
      width: 100%;
      height: 100%;
      float: left;
      resize: none;
      white-space:nowrap;
      overflow:auto;
      font-size:11px;
      font-family:monospace;
      line-height:15px;
      font-weight:500;
      border: 0;
      padding: 0;
      margin: 0;
    }

    #inputform {
      width: 100%;
      height: 100%;
    }

    #separator {
      display: inline-block;
      width: 10px;
      height: 100%;
      vertical-align: top;
      margin-top: 2px;
      cursor: col-resize;
      background-color: #aaa;
      background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='10' height='30'><path d='M2 0 v30 M5 0 v30 M8 0 v30' fill='none' stroke='black'/></svg>");
      background-repeat: no-repeat;
      background-position: center;
    }

    #dragable {
      position: absolute;
      left: 45%;
      top: 0px;
      width: 10px;
      height: 100%;
      vertical-align: top;
      opacity: 0;
    }

    #msgholder {
      position: absolute;
      bottom: 1em;
      left: 5em;
    }

    #visualization {
      width: 100%;
      height: 100%;
    }
  </style>

  <script>
    var mousedown = false;
    var svg_width = 800;
    var svg_height = 1000;
    var COLORS = ["#ffad33", "#6599ff", "#198d6d", "#ff523f", "#683b96"];

    function init() {
      $("#input").on("input", function() {
        readInput();
      });
      $("#input").on("keydown", function() {
        readInput();
      });
      readInput();

      $(window).resize(function() {
        var win = $(this);
        $("main").css("height", win.height() - 56);
      });

      $("main").css("height", $(window).height() - 56);

      let dropArea = document.getElementById("editor");

      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false)
      });

      ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false)
      });

      ;
      ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false)
      });

      dropArea.addEventListener('drop', handleDrop, false)


      $('#input').keydown(function (e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === 9) {
          e.preventDefault();

          const TAB_SIZE = 2;
          document.execCommand('insertText', false, ' '.repeat(TAB_SIZE));
        }
      });

      scale();

      var data = new URLSearchParams(window.location.search).get('data');
      if (data && data != ""){
        try {
          $("#input").val(JSON.stringify(JSON.parse(atob(data)), null, 2));
          readInput();
          $("#msgholder").html("");
        } catch (e) {
          $("#msgholder").html('<div id="msgerror" class="alert alert-danger" role="alert">Link does not contain valid data.</div>');
        }
      }


      /* Line Numbers */
      var textareaInput = document.getElementById("input");

      var canvas = $("#canvasLines");
      canvas.width = 48;    // must not set width & height in css !!!
      canvas.height = textareaInput.height;  // must not set width & height in css !!!
      textareaInput.canvasLines = canvas;

      textareaInput.paintLineNumbers = function()
      {
        try
        {
          var canvas = document.getElementById("canvasLines");
          if (canvas.height != this.clientHeight) canvas.height = this.clientHeight; // on resize
          var ctx = canvas.getContext("2d");
          ctx.fillStyle = "#F0F0F0";
          ctx.fillRect(0, 0, 42, this.scrollHeight+1);
          ctx.fillStyle = "#000000";
          ctx.font = "11px monospace"; // NOTICE: must match TextArea font-size(11px) and lineheight(15) !!!
          var startIndex = Math.floor(this.scrollTop / 15,0);
          var endIndex = startIndex + Math.ceil(this.clientHeight / 15,0);
          for (var i = startIndex; i < endIndex; i++)
          {
            var ph = 10 - this.scrollTop + (i*15);
            var text = ''+(1+i);  // line number
            ctx.fillText(text,40-(text.length*6),ph);
          }
        }
        catch(e){
          alert(e);
        }
      };

      textareaInput.onscroll     = function(ev){ this.paintLineNumbers(); };
      textareaInput.onmousedown  = function(ev){ this.mouseisdown = true; }
      textareaInput.onmouseup    = function(ev){ this.mouseisdown = false; this.paintLineNumbers(); };
      textareaInput.onmousemove  = function(ev){ if (this.mouseisdown) this.paintLineNumbers(); };
      textareaInput.paintLineNumbers();
    }

    function preventDefaults(e) {
      e.preventDefault()
      e.stopPropagation()
    };

    function highlight(e) {
      $("#editor").addClass('highlight');
      $("#input").addClass('highlight');

    };

    function unhighlight(e) {
      $("#editor").removeClass('highlight');
      $("#input").removeClass('highlight');
    };

    function handleDrop(e) {
      var reader = new FileReader();
      reader.onloadend = function() {
        var data = "";
        try {
          var data = JSON.parse(this.result);
          callbackFileDrop(data);
          $("#msgholder").html("");
        } catch (e) {
          if (this.result.replace(/\s/g, '').length > 0) {
            $("#msgholder").html('<div id="msgerror" class="alert alert-danger" role="alert">File does not contain a valid JSON.</div>');
          } else {
            $("#msgholder").html('<div id="msgerror" class="alert alert-danger" role="alert">File is empty.</div>');
          }
        }
      };

      var fileData = e.dataTransfer.files[0]
      if (fileData && (fileData.name.endsWith(".json") || fileData.name.endsWith(".txt"))){
        reader.readAsText(fileData);
        event.preventDefault();
      } else {
        $("#msgholder").html('<div id="msgerror" class="alert alert-danger" role="alert">We only support JSON files saved as .json or .txt to be uploaded. </div>');
      }
    }

    function callbackFileDrop(data) {
      $("#input").val(JSON.stringify(data, null, 2));
      readInput();
    }


    function dragStart(e, left, right) {
      $("#dragable").css("width", "100%");
      $("#dragable").css("left", "0px");

      mousedown = true;
      x = e.clientX
      dragOffsetLeft = document.getElementById(left).offsetWidth - x;
      dragOffsetRight = document.getElementById(right).offsetWidth + x;
    };

    function readInput() {
      var strValueInput = $("#input").val();
      var input;
      try {
        input = JSON.parse(strValueInput);
        $("#msgholder").html("");
      } catch (e) {
        if (strValueInput.replace(/\s/g, '').length > 0) {
          $("#msgholder").html('<div id="msgerror" class="alert alert-danger" role="alert">Not a valid JSON.</div>');
        } else {
          $("#msgholder").html("");
        }
      }

      if (input) {
        drawVisualization(input);
      }
    }

    function getArrow(x, y, color) {
      var arrow = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
      arrow.setAttribute("points", (x - 10) + ", " + y + ", " + (x + 10) + ", " + y + ", " + x + ", " + (y + 20));
      arrow.setAttribute("stroke", color);
      arrow.setAttribute("stroke-width", 1);
      arrow.setAttribute("fill", color);
      return arrow;
    }

    function getEnd(x, y, color) {

      var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      line.setAttribute('x1', x - 10);
      line.setAttribute('x2', x + 10);
      line.setAttribute('y1', y + 2);
      line.setAttribute('y2', y + 2);
      line.setAttribute("stroke-width", 5);
      line.setAttribute("stroke", color);
      line.setAttribute("fill", color);
      return line;
    }

    function drawEntity(index, entity, yOffset) {
      var posScale = 335;
      var timeScale = 100;
      var xOffset = 415;

      var name = entity["name"];
      var isMain = entity["main"];

      var timeline = entity["timeline"];
      var color = entity["color"];
      if (color && color != "") {

      } else {
        color = COLORS[index % 5];
      }

      let g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
      g.setAttribute('id', "entityId" + index);
      g.setAttribute('name', name);

      var paths = [];

      //var lastElement = timeline[timeline.length-1];

      //timeline.push(lastElement);

      if (timeline) {
        var j;
        for (j = 1; j < timeline.length; j++) {
          var preTime = timeline[j - 1]["time"];
          var prePosition = timeline[j - 1]["position"];

          var time = timeline[j]["time"];
          var position = timeline[j]["position"];
          var cause = timeline[j]["cause"];

          var x1 = prePosition * posScale + xOffset;
          var y1 = preTime * timeScale + yOffset;

          var x2 = x1;
          var y2 = time * timeScale + yOffset;

          var strokeWidth = 5;


          if (j == 1 && name && name != "") {
            var textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            textElement.setAttribute('x', x1);
            textElement.setAttribute('y', y1 - 10);
            textElement.setAttribute('fill', '#000');
            textElement.setAttribute('text-anchor', "middle");
            textElement.textContent = name;

            var width = 100;
            var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
            rect.setAttribute('x', x1 - width / 2.0);
            rect.setAttribute('y', y1 - 30);
            rect.setAttribute('height', 30);
            rect.setAttribute('width', width);
            rect.setAttribute('fill', color);
            //rect.setAttribute(null, "rx", "15");
            g.append(rect);
            g.append(textElement);

          }

          //timelines

          var pathPoint = {
            x1: x1,
            y1: y1,
          };

          paths.push(pathPoint);

          svg_height = Math.max(svg_height, y1, y2);


          // connections
          x1 = x2;
          y1 = y2;

          x2 = position * posScale + xOffset;
          y2 = y1;

          var pathPoint = {
              x1: x1,
              y1: y1,
          };

          paths.push(pathPoint);

          svg_height = Math.max(svg_height, y1, y2);

          if (cause && cause != "") {
            var textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            //textElement.setAttribute("transform", "rotate(90 " + x2 + "," + y2 + ")");

            textElement.setAttribute('y', y1 - 10);
            textElement.setAttribute('fill', '#000');

            if (x1 > x2){
              textElement.setAttribute('text-anchor', "end");
              textElement.setAttribute('x', x1 - 10);
            } else {
              textElement.setAttribute('x', x1 + 10);
            }
            textElement.textContent = cause;

            g.append(textElement);
          }
          if (j == timeline.length-1){

            var pathPoint = {
              x1: x2,
              y1: y2,
            };
            paths.push(pathPoint);

            var isEnd = timeline[j]["end"];
            if (isEnd && isEnd == "true") {
            } else {
                y2 = y2 + (0.5 * timeScale);
                svg_height = Math.max(svg_height, y2);
                var pathPoint = {
                  x1: x2,
                  y1: y2,
                };
                paths.push(pathPoint);
            }

          }
        }

        //draw paths
        var i = 0;
        var d = "";
        for(i; i < paths.length; i++) {
          var point = paths[i];
          var x1 = point["x1"];
          var y1 = point["y1"];
          var elementTimeline = document.createElementNS('http://www.w3.org/2000/svg', 'path');
          var q = 150;

          if (i == 0) {
            d +=  "M" + x1 + " " + y1 + " ";
          } else {
            d += "L" + x1 + " " + y1 + " ";
          }
        }

        elementTimeline.setAttribute('id', 'drawn');
        elementTimeline.setAttribute('d', d);
        elementTimeline.setAttribute("stroke", color);
        elementTimeline.setAttribute("fill", "none");
        elementTimeline.setAttribute("stroke-width", strokeWidth);
        //elementTimeline.setAttribute("marker-end", "url(#arrowhead)");

        if (isMain && isMain != "true"){
         elementTimeline.setAttribute("stroke-dasharray", 10);
        }

        g.append(elementTimeline);
        var isEnd = timeline[timeline.length-1]["end"];
        if (isEnd && isEnd == "true"){
          g.append(getEnd(x1, y1, color));
        } else {
          g.append(getArrow(x1, y1, color));
        }

      }

      $("#visualizationcore").append(g);
    }

    function drawVisualization(inputJson) {
      $(visualizationcore).children().remove();

      var entities = inputJson["entities"];

      if (entities.length > 0) svg_height = 0;

      // Adjust y offset
      var yOffset = 40;
      entities.forEach(e => {
        if (e["name"]  && e["name"] != ""){
          yOffset = 60;
        }});

      var i;
      for (i = 0; i < entities.length; i++) {
        drawEntity(i, entities[i], yOffset);
      }

      // Adjust time axes
      var t = $("#time").children("line")[0];
      t.setAttribute("y2", svg_height);
      var y = parseFloat(t.getAttribute("y1")) + ((parseFloat(t.getAttribute("y2"))-parseFloat(t.getAttribute("y1"))) / 2);
      $("#time").children("text")[0].setAttribute("transform", "translate(20, " + y + ") rotate(270)");

      scale();
    }

    function newEntity() {
      var input = document.getElementById("input").value;

      var inputJson = {};
      if (input == ""){
        inputJson = {"entities": []};
      } else {
        inputJson = JSON.parse(input);
      }

      var newElement = {
        name: "default_name",
        color: COLORS[inputJson.entities.length % 5],

        timeline: [{
            time: 1,
            position: -1

          },
          {
            time: 2,
            position: -1,
            cause: "enter_cause"

          }
        ]
      }

      inputJson.entities.push(newElement);
      document.getElementById("input").value = JSON.stringify(inputJson, null, 2);;
      readInput();
    }

    function resetJSON() {
      var defaultJSON = {
        "entities": [{
            name: "default_name",
            main:"true",
            "timeline": [{
                "time": 1,
                "position": -0.9
              },
              {
                "time": 2,
                "position": -0.7,
                "cause": "enter_cause"
              }
            ]
          },
          {
            name: "default_name",
            "timeline": [{
                "time": 1,
                "position": 0.8
              },
              {
                "time": 2,
                "position": 0.6,
                "cause": "enter_cause"
              }
            ]
          }
        ]
      };
      document.getElementById("input").value = JSON.stringify(defaultJSON, null, 2);

      readInput();
    }

    function clearEditor() {
      document.getElementById("input").value = "";
      readInput();
    }

    function dragRelease() {
      document.getElementById('dragable').style.width = '10px';
      document.getElementById('dragable').style.left = document.getElementById('separator').offsetLeft + 'px';
      mousedown = false;
    }

    function drag(e, left, right) {
      if (!mousedown) {
        return;
      }

      x = e.clientX;
      tmpLeft = dragOffsetLeft + x;
      tmpRight = dragOffsetRight - x;

      if (tmpLeft < 250 || tmpRight < 250) {
        return;
      }

      document.getElementById('editor').style.width = tmpLeft + 'px';
      document.getElementById('preview').style.width = tmpRight + 'px';

      scale();
    };

    function scale() {
      var scaleW = $("#preview").width() / svg_width;
      var scaleH = $("#preview").height() / (svg_height + 20);
      document.getElementById("scale").setAttribute("transform", "scale(" + Math.min(scaleW, scaleH) + ")");
    };

    function download(filename, content) {
      var element = document.createElement('a');
      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
      element.setAttribute('download', filename);

      element.style.display = 'none';
      document.body.appendChild(element);

      element.click();

      document.body.removeChild(element);
    };

    function downloadSVG() {
      let e = document.getElementById("visualization").cloneNode(true);
      e.getElementById("scale").setAttribute("transform", "");

      var content = '<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">';
      content += e.innerHTML;
      content += '</svg>';
      download("visualization.svg", content);
    };

    function share() {
      var data = $("#input").val();
      data = JSON.stringify(JSON.parse(data));
      data = btoa(data);

      var link = window.location.protocol + "//" + window.location.host + "/" + window.location.pathname + "?data=" + data;
      console.log(link);

      $("#textareaShare").val(link);
      $("#textareaShare").select();

    }

    function shareCopy() {
      var copyText = document.getElementById("textareaShare");

      /* Select the text field */
      copyText.select();
      copyText.setSelectionRange(0, 99999); /*For mobile devices*/

      /* Copy the text inside the text field */
      document.execCommand("copy");
    }

    function toggleInfo() {
      if ($("#overlay").css("display") == "none") {
        $("#overlay").css("display", "block");
      } else {
        $("#overlay").css("display", "none");
      }
    }
  </script>
</head>

<body onload="init()">
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Actuality-Time Continuum</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">

      <ul class="navbar-nav mr-auto">
         <li class="nav-item dropdown">
           <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
           Edit
           </a>
           <div class="dropdown-menu" aria-labelledby="navbarDropdown">
             <a class="dropdown-item" href="#" onclick="newEntity(); return false;">New Entity</a>
             <div class="dropdown-divider"></div>
             <a class="dropdown-item" href="#" onclick="resetJSON(); return false;">Load Default Template</a>
             <a class="dropdown-item" href="#" onclick="clearEditor(); return false;">Clear Editor</a>
           </div>
         </li>
        <li class="nav-item">
          <a id="download-svg" class="nav-link" href="#" onclick="downloadSVG(); return false;"><i class="fas fa-file-download">
            </i> SVG</a>
        </li>
        <li class="nav-item">
          <a id="info" class="nav-link" href="#" data-toggle="modal" data-target="#staticBackdropShare" onclick="share(); return false;"><i class="fas fa-share">
            </i> Share</a>
        </li>
        <li class="nav-item">
          <a id="info" class="nav-link" href="#" data-toggle="modal" data-target="#staticBackdrop"><i class="fas fa-info-circle">
            </i> Info</a>
        </li>
      </ul>
    </div>
  </nav>

  <main>
    <section id="editor">
      <form id="inputform">
        <table cellspacing="0" cellpadding="0" style="padding:0px 0px 0px 0px!important; margin:0px 0px 0px 0px!important; font-size:1px; line-height:0px; width: 100%; height: 100%;">
          <tr>
            <td style="vertical-align:top; width:1px; background-color: #F0F0F0;">
              <canvas id="canvasLines" width="48"style="margin-top:0px; padding-top:0px;"></canvas>
            </td>
            <td style="vertical-align:top; "><textarea id="input" placeholder="Insert JSON here OR drop and drop a JSON file."></textarea></td>
          </tr>
        </table>
        <div id="msgholder"></div>
     </form>
    </section>

    <div id="separator"></div>
    <div id="dragable" onmousedown="dragStart(event, 'editor', 'preview'); return false;" onmousemove="drag(event, 'editor', 'preview');" onmouseout="dragRelease();" onmouseup="dragRelease();"></div>
    <section id="preview">
      <svg id="visualization">
        <defs>
          <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto">
            <polygon points="0 0, 10 3.5, 0 7" />
          </marker>
        </defs>
        <g id="scale" transform="scale(1)">
          <g id="continuum">
            <line x1="80" y1="35" x2="80" y2="65" style="stroke-width:5;stroke:rgb(0,0,0)" />
            <line x1="80" y1="50" x2="750" y2="50" style="stroke-width:5;stroke:rgb(0,0,0)" />
            <line x1="750" y1="35" x2="750" y2="65" style="stroke-width:5;stroke:rgb(0,0,0)" />

            <!-- Mixed Reality -->
            <line x1="130" y1="15" x2="130" y2="35" style="stroke-width:2;stroke:rgb(0,0,0)" />
            <line x1="130" y1="15" x2="285" y2="15" style="stroke-width:2;stroke:rgb(0,0,0)" />
            <text x="415" y="15" font-weight="bold" font-family="Verdana" font-size="20" text-anchor="middle" dominant-baseline="middle">Mixed Reality (MR)</text>
            <line x1="545" y1="15" x2="700" y2="15" style="stroke-width:2;stroke:rgb(0,0,0)" />
            <line x1="700" y1="15" x2="700" y2="35" style="stroke-width:2;stroke:rgb(0,0,0)" />

            <!-- Label -->
            <text x="100" y="80" font-weight="bold" font-family="Verdana" font-size="16" text-anchor="middle" dominant-baseline="middle">Real</text>
            <text x="100" y="100" font-weight="bold" font-family="Verdana" font-size="16" text-anchor="middle" dominant-baseline="middle">Environment</text>
            <text x="730" y="80" font-weight="bold" font-family="Verdana" font-size="16" text-anchor="middle" dominant-baseline="middle">Virtual</text>
            <text x="730" y="100" font-weight="bold" font-family="Verdana" font-size="16" text-anchor="middle" dominant-baseline="middle">Environment</text>

            <!-- Arrows -->
            <line x1="135" y1="65" x2="185" y2="65" style="stroke-width:2;stroke:rgb(0,0,0)" marker-end="url(#arrowhead)"/>
            <line x1="695" y1="65" x2="645" y2="65" style="stroke-width:2;stroke:rgb(0,0,0)" marker-end="url(#arrowhead)"/>
          </g>

          <!-- Time -->
          <g id="time">
            <line x1="40" y1="125" x2="40" y2="950" style="stroke-width:4;stroke:rgb(0,0,0)" marker-end="url(#arrowhead)"/>

            <text transform="translate(20, 512.5) rotate(270)" font-weight="bold" font-family="Verdana" font-size="18" text-anchor="middle" dominant-baseline="middle">Time</text>
          </g>
          <g id="visualizationcore">
          </g>
        </g>
        Sorry, your browser does not support inline SVG.
      </svg>
    </section>
  </main>
  <!-- Information -->
  <div class="modal fade" id="staticBackdrop" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="staticBackdropLabel">Actuality-Time Continuum</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          This project is licensed under the terms of the MIT license.
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>


  <!-- Share -->
  <div class="modal fade" id="staticBackdropShare" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="staticBackdropShareLabel">Share</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <p>Link to share the current version:</p>
          <textarea id="textareaShare" style="width: 100%;height: 100%;">

          </textarea>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" onclick="shareCopy(); return false;">Copy to clipboard</button>
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
